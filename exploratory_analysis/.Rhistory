labs(
title = "Histograma de la variable de respuesta (escala logarítmica)",
x     = "Tiempo medio de ejecución (s) [log10]",
y     = "Frecuencia"
) +
theme_minimal()
# Creamos la variable treatment para usarla en los gráficos
df <- df %>%
mutate(treatment = interaction(architecture, compiler, sep = " × "))
# Serie temporal de tiempos de ejecución
ggplot(df, aes(x = time_observed, y = response, color = treatment)) +
geom_point(size = 1, alpha = 0.6) +
scale_color_brewer(palette = "Dark2") +
scale_y_log10() +
labs(
title = "Serie temporal de avg_time_sec vs. tiempo observado",
x     = "Tiempo observado (s)",
y     = "Tiempo medio de ejecución (s) [log10]",
color = "Tratamiento"
) +
theme_minimal()
# Gráfico para verificar la aleatorización
ggplot(df, aes(x = obs, y = treatment)) +
geom_tile(fill = "steelblue") +
labs(
title = "Orden de tratamientos tras aleatorizar",
x     = "Índice de observación",
y     = "Tratamiento"
) +
theme_minimal()
# Estadísticas descriptivas agrupadas por tipo de arquitectura
arch_stats <- df %>%
group_by(architecture) %>%
summarise(
n       = n(),
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(arch_stats)
# Estadísticas descriptivas agrupadas por tipo de compilador
comp_stats <- df %>%
group_by(compiler) %>%
summarise(
n       = n(),
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(comp_stats)
# Estadísticas por combinación de factores
treat_stats <- df %>%
group_by(architecture, compiler) %>%
summarise(
n       = n(),
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(treat_stats)
# Boxplot comparativo por arquitectura
ggplot(df, aes(x = architecture, y = response, fill = architecture)) +
geom_boxplot(alpha = 0.7) +
scale_y_log10() +
scale_fill_brewer(palette = "Set1") +
labs(
title = "Tiempo de ejecución por Arquitectura",
subtitle = "Escala logarítmica para mejor visualización",
x = "Arquitectura",
y = "Tiempo medio de ejecución (s) [log10]"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
legend.position = "none"
)
# Boxplot comparativo por compilador
ggplot(df, aes(x = compiler, y = response, fill = compiler)) +
geom_boxplot(alpha = 0.7) +
scale_y_log10() +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Tiempo de ejecución por Compilador",
subtitle = "Escala logarítmica para mejor visualización",
x = "Compilador",
y = "Tiempo medio de ejecución (s) [log10]"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
legend.position = "none"
)
# Boxplot comparativo de todos los tratamientos
ggplot(df, aes(x = treatment, y = response, fill = treatment)) +
geom_boxplot(alpha = 0.7) +
scale_y_log10() +
scale_fill_brewer(palette = "Dark2") +
labs(
title = "Comparación de Tratamientos (Arquitectura × Compilador)",
subtitle = "Análisis de tiempos de ejecución en escala logarítmica",
x = "Tratamiento",
y = "Tiempo medio de ejecución (s) [log10]"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
# Configuración inicial del documento
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Carga de librerías necesarias para el análisis
library(dplyr)
library(ggplot2)
library(readr)
# Lectura del archivo CSV con los resultados del benchmark
df = (read.csv("../data/execution/combined_data.csv", header=T, encoding = "UTF-8"))
# Renombra y convierte variables
df <- df %>%
mutate(
response    = avg_time_sec,
architecture= factor(architecture, levels = c("intel","ryzen")),
compiler    = factor(compiler,   levels = c("clang","gcc")),
obs         = row_number()           # índice de observación
)
# Barajamos todo el dataframe para aleatorización real
set.seed(1234)
df <- df %>%
sample_frac(1) %>%           # baraja todas las filas
mutate(
obs           = row_number(),            # índice de observación aleatorio
time_observed = cumsum(response)         # tiempo acumulado desde t0 = 0
)
# Muestra las primeras filas del dataframe aleatorizado
head(df)
# Cálculo de medidas estadísticas básicas para toda la muestra
global_stats <- df %>%
summarise(
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(global_stats)
# Boxplot global con escala logarítmica
ggplot(df, aes(y = response)) +
geom_boxplot() +
scale_y_log10() +  # Escala logarítmica para mejor visualización
labs(
title = "Boxplot de la variable de respuesta (escala logarítmica)",
y     = "Tiempo medio de ejecución (s) [log10]"
)
# Histograma con escala logarítmica
ggplot(df, aes(x = response)) +
geom_histogram(bins = 50, color = "black", fill = "lightgray") +
scale_x_log10() +  # Escala logarítmica para mejor visualización
labs(
title = "Histograma de la variable de respuesta (escala logarítmica)",
x     = "Tiempo medio de ejecución (s) [log10]",
y     = "Frecuencia"
) +
theme_minimal()
# Creamos la variable treatment para usarla en los gráficos
df <- df %>%
mutate(treatment = interaction(architecture, compiler, sep = " × "))
# Serie temporal de tiempos de ejecución
ggplot(df, aes(x = time_observed, y = response, color = treatment)) +
geom_point(size = 1, alpha = 0.6) +
scale_color_brewer(palette = "Dark2") +
scale_y_log10() +
labs(
title = "Serie temporal de avg_time_sec vs. tiempo observado",
x     = "Tiempo observado (s)",
y     = "Tiempo medio de ejecución (s) [log10]",
color = "Tratamiento"
) +
theme_minimal()
# Gráfico para verificar la aleatorización
ggplot(df, aes(x = obs, y = treatment)) +
geom_tile(fill = "steelblue") +
labs(
title = "Orden de tratamientos tras aleatorizar",
x     = "Índice de observación",
y     = "Tratamiento"
) +
theme_minimal()
# Estadísticas descriptivas agrupadas por tipo de arquitectura
arch_stats <- df %>%
group_by(architecture) %>%
summarise(
n       = n(),
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(arch_stats)
# Estadísticas descriptivas agrupadas por tipo de compilador
comp_stats <- df %>%
group_by(compiler) %>%
summarise(
n       = n(),
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(comp_stats)
# Estadísticas por combinación de factores
treat_stats <- df %>%
group_by(architecture, compiler) %>%
summarise(
n       = n(),
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(treat_stats)
# Boxplot comparativo por arquitectura
ggplot(df, aes(x = architecture, y = response, fill = architecture)) +
geom_boxplot(alpha = 0.7) +
scale_y_log10() +
scale_fill_brewer(palette = "Set1") +
labs(
title = "Tiempo de ejecución por Arquitectura",
subtitle = "Escala logarítmica para mejor visualización",
x = "Arquitectura",
y = "Tiempo medio de ejecución (s) [log10]"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
legend.position = "none"
)
# Boxplot comparativo por compilador
ggplot(df, aes(x = compiler, y = response, fill = compiler)) +
geom_boxplot(alpha = 0.7) +
scale_y_log10() +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Tiempo de ejecución por Compilador",
subtitle = "Escala logarítmica para mejor visualización",
x = "Compilador",
y = "Tiempo medio de ejecución (s) [log10]"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
legend.position = "none"
)
# Boxplot comparativo de todos los tratamientos
ggplot(df, aes(x = treatment, y = response, fill = treatment)) +
geom_boxplot(alpha = 0.7) +
scale_y_log10() +
scale_fill_brewer(palette = "Dark2") +
labs(
title = "Comparación de Tratamientos (Arquitectura × Compilador)",
subtitle = "Análisis de tiempos de ejecución en escala logarítmica",
x = "Tratamiento",
y = "Tiempo medio de ejecución (s) [log10]"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
# Configuración inicial del documento
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Carga de librerías necesarias para el análisis
library(dplyr)
library(ggplot2)
library(readr)
# Lectura del archivo CSV con los resultados del benchmark
df = (read.csv("../data/execution/combined_data.csv", header=T, encoding = "UTF-8"))
# Renombra y convierte variables
df <- df %>%
mutate(
response    = avg_time_sec,
architecture= factor(architecture, levels = c("intel","ryzen")),
compiler    = factor(compiler,   levels = c("clang","gcc")),
obs         = row_number()           # índice de observación
)
# Barajamos todo el dataframe para aleatorización real
set.seed(1234)
df <- df %>%
sample_frac(1) %>%           # baraja todas las filas
mutate(
obs           = row_number(),            # índice de observación aleatorio
time_observed = cumsum(response)         # tiempo acumulado desde t0 = 0
)
# Muestra las primeras filas del dataframe aleatorizado
head(df)
# Cálculo de medidas estadísticas básicas para toda la muestra
global_stats <- df %>%
summarise(
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(global_stats)
# Boxplot global con escala logarítmica
ggplot(df, aes(y = response)) +
geom_boxplot() +
scale_y_log10() +  # Escala logarítmica para mejor visualización
labs(
title = "Boxplot de la variable de respuesta (escala logarítmica)",
y     = "Tiempo medio de ejecución (s) [log10]"
)
# Histograma con escala logarítmica
ggplot(df, aes(x = response)) +
geom_histogram(bins = 50, color = "black", fill = "lightgray") +
scale_x_log10() +  # Escala logarítmica para mejor visualización
labs(
title = "Histograma de la variable de respuesta (escala logarítmica)",
x     = "Tiempo medio de ejecución (s) [log10]",
y     = "Frecuencia"
) +
theme_minimal()
# Creamos la variable treatment para usarla en los gráficos
df <- df %>%
mutate(treatment = interaction(architecture, compiler, sep = " × "))
# Serie temporal de tiempos de ejecución
ggplot(df, aes(x = time_observed, y = response, color = treatment)) +
geom_point(size = 1, alpha = 0.6) +
scale_color_brewer(palette = "Dark2") +
scale_y_log10() +
labs(
title = "Serie temporal de avg_time_sec vs. tiempo observado",
x     = "Tiempo observado (s)",
y     = "Tiempo medio de ejecución (s) [log10]",
color = "Tratamiento"
) +
theme_minimal()
# Gráfico para verificar la aleatorización
ggplot(df, aes(x = obs, y = treatment)) +
geom_tile(fill = "steelblue") +
labs(
title = "Orden de tratamientos tras aleatorizar",
x     = "Índice de observación",
y     = "Tratamiento"
) +
theme_minimal()
# Estadísticas descriptivas agrupadas por tipo de arquitectura
arch_stats <- df %>%
group_by(architecture) %>%
summarise(
n       = n(),
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(arch_stats)
# Estadísticas descriptivas agrupadas por tipo de compilador
comp_stats <- df %>%
group_by(compiler) %>%
summarise(
n       = n(),
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(comp_stats)
# Estadísticas por combinación de factores
treat_stats <- df %>%
group_by(architecture, compiler) %>%
summarise(
n       = n(),
mean    = mean(response),
variance= var(response),
sd      = sd(response),
min     = min(response),
Q1      = quantile(response, 0.25),
median  = median(response),
Q3      = quantile(response, 0.75),
max     = max(response)
)
print(treat_stats)
# Boxplot comparativo por arquitectura
ggplot(df, aes(x = architecture, y = response, fill = architecture)) +
geom_boxplot(alpha = 0.7) +
scale_y_log10() +
scale_fill_brewer(palette = "Set1") +
labs(
title = "Tiempo de ejecución por Arquitectura",
subtitle = "Escala logarítmica para mejor visualización",
x = "Arquitectura",
y = "Tiempo medio de ejecución (s) [log10]"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
legend.position = "none"
)
# Boxplot comparativo por compilador
ggplot(df, aes(x = compiler, y = response, fill = compiler)) +
geom_boxplot(alpha = 0.7) +
scale_y_log10() +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Tiempo de ejecución por Compilador",
subtitle = "Escala logarítmica para mejor visualización",
x = "Compilador",
y = "Tiempo medio de ejecución (s) [log10]"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
legend.position = "none"
)
# Boxplot comparativo de todos los tratamientos
ggplot(df, aes(x = treatment, y = response, fill = treatment)) +
geom_boxplot(alpha = 0.7) +
scale_y_log10() +
scale_fill_brewer(palette = "Dark2") +
labs(
title = "Comparación de Tratamientos (Arquitectura × Compilador)",
subtitle = "Análisis de tiempos de ejecución en escala logarítmica",
x = "Tratamiento",
y = "Tiempo medio de ejecución (s) [log10]"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
)
library(ggplot2)
# Suponemos que treat_stats ya existe en el entorno
# treat_stats tiene: architecture, compiler, mean, sd, …
ggplot(treat_stats, aes(x = architecture, y = mean, color = compiler, group = compiler)) +
geom_point(size = 4) +
geom_line(size = 1) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd),
width = 0.1, position = position_dodge(width = 0)) +
labs(
title = "Interacción Arquitectura × Compilador: Media ± SD",
x     = "Arquitectura",
y     = "Tiempo medio de ejecución (s)",
color = "Compilador"
) +
theme_minimal()
library(ggplot2)
# Interacción: Media de response por compilador, coloreado por arquitectura
ggplot(df, aes(x = compiler, y = response, color = architecture, group = architecture)) +
stat_summary(fun = mean, geom = "point", size = 3) +
stat_summary(fun = mean, geom = "line", size = 1) +
labs(
title = "Interacción: Media de avg_time_sec por Compilador",
x     = "Compilador",
y     = "Tiempo medio de ejecución (s)",
color = "Arquitectura"
) +
theme_minimal()
# Interacción: Media de response por arquitectura, coloreado por compilador
ggplot(df, aes(x = architecture, y = response, color = compiler, group = compiler)) +
stat_summary(fun = mean, geom = "point", size = 3) +
stat_summary(fun = mean, geom = "line", size = 1) +
labs(
title = "Interacción: Media de avg_time_sec por Arquitectura",
x     = "Arquitectura",
y     = "Tiempo medio de ejecución (s)",
color = "Compilador"
) +
theme_minimal()
